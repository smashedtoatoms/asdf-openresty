#!/usr/bin/env bash

install_openresty() {
  local install_type=$1
  local version=$2
  local install_path=$3

  if [ "$TMPDIR" = "" ]; then
    local tmp_download_dir=$(mktemp -d)
  else
    local tmp_download_dir=$TMPDIR
  fi

  local source_path=$(get_download_file_path $install_type $version $tmp_download_dir)
  download_source $install_type $version $source_path

  # running this in a subshell
  # because we don't want to disturb current working dir
  (
    cd $(dirname $source_path)
    tar zxf $source_path || exit 1
    cd $(untar_path $install_type $version $tmp_download_dir)

    local configure_options="$(construct_configure_options)"
    # set in os_based_configure_options
    # we unset it here because echo-ing changes the return value of the function
    unset ASDF_PKG_MISSING

    echo "Building with options: $configure_options"
    eval "./configure $configure_options" || exit 1
    make || exit 1
    make install || exit 1
  )
}


construct_configure_options() {
  if [ "$OPENRESTY_CONFIGURE_OPTIONS" = "" ]; then
    local configure_options="$(os_based_configure_options) --prefix=$install_path"

    if [ "$OPENRESTY_EXTRA_CONFIGURE_OPTIONS" != "" ]; then
      configure_options="$configure_options $OPENRESTY_EXTRA_CONFIGURE_OPTIONS"
    fi
  else
    local configure_options="$OPENRESTY_CONFIGURE_OPTIONS --prefix=$install_path"
  fi

  echo "$configure_options"
}

darwin_package_path() {
  local package_name=$1

  if [ "$(brew ls --versions $package_name)" = "" ]; then
    echo "/opt/local/lib"
  else
    echo "$(brew --prefix $package_name)"
  fi
}

exit_if_darwin_package_manager_not_installed() {
  if [ "$(brew --version 2>/dev/null)" = "" ]; then
    if [ "$(port version 2>/dev/null)" = "" ]; then
      echo "ERROR: Please install homebrew or macports for OSX"
      exit 1
    fi
  fi
}

os_based_configure_options() {
  local operating_system=$(uname -a)
  local configure_options=""

  if [[ "$operating_system" =~ "Darwin" ]]; then
    exit_if_darwin_package_manager_not_installed
    local openssl_path=$(darwin_package_path openssl)
    local pcre_path=$(darwin_package_path pcre)
  else
    local openssl_path=/usr
    local pcre_path=/usr
  fi

  if [ "$openssl_path" = "" ]; then
    export ASDF_PKG_MISSING="openssl"
  elif [ "$pcre_path" = "" ]; then
    export ASDF_PKG_MISSING="pcre"
  else
    configure_options="$configure_options --with-cc-opt=\"-I$openssl_path/include/ -I$pcre_path/include/\" --with-ld-opt=\"-L$openssl_path/lib/ -L$pcre_path/lib/\" -j8"
  fi

  echo $configure_options
}


untar_path() {
  local install_type=$1
  local version=$2
  local tmp_download_dir=$3

  if [ "$install_type" = "version" ]
  then
    echo "$tmp_download_dir/openresty-${version}"
  else
    echo "$tmp_download_dir/openresty-${version}"
  fi
}


download_source() {
  local install_type=$1
  local version=$2
  local download_path=$3
  local download_url=$(get_download_url $install_type $version)

  curl -Lo $download_path -C - $download_url
}


get_download_file_path() {
  local install_type=$1
  local version=$2
  local tmp_download_dir=$3
  local pkg_name="openresty-${version}.tar.gz"

  echo "$tmp_download_dir/$pkg_name"
}


get_download_url() {
  local install_type=$1
  local version=$2
  echo "https://openresty.org/download/openresty-${version}.tar.gz"
}


install_openresty $ASDF_INSTALL_TYPE $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH
